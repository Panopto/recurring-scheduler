//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Utilities.SessionManagement46 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticationInfo", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class AuthenticationInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserKeyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AuthCode {
            get {
                return this.AuthCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthCodeField, value) != true)) {
                    this.AuthCodeField = value;
                    this.RaisePropertyChanged("AuthCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserKey {
            get {
                return this.UserKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.UserKeyField, value) != true)) {
                    this.UserKeyField = value;
                    this.RaisePropertyChanged("UserKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderBase", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Utilities.SessionManagement46.FolderWithExternalContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Utilities.SessionManagement46.Folder))]
    public partial class FolderBase : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowPublicNotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllowSessionDownloadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AudioPodcastITunesUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AudioRssUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] ChildFoldersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeliveriesHaveSpecifiedOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmbedUploaderUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmbedUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool EnablePodcastField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPublicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ListUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ParentFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] PresentersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] SessionsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SettingsUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VideoPodcastITunesUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VideoRssUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowPublicNotes {
            get {
                return this.AllowPublicNotesField;
            }
            set {
                if ((this.AllowPublicNotesField.Equals(value) != true)) {
                    this.AllowPublicNotesField = value;
                    this.RaisePropertyChanged("AllowPublicNotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllowSessionDownload {
            get {
                return this.AllowSessionDownloadField;
            }
            set {
                if ((this.AllowSessionDownloadField.Equals(value) != true)) {
                    this.AllowSessionDownloadField = value;
                    this.RaisePropertyChanged("AllowSessionDownload");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AudioPodcastITunesUrl {
            get {
                return this.AudioPodcastITunesUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.AudioPodcastITunesUrlField, value) != true)) {
                    this.AudioPodcastITunesUrlField = value;
                    this.RaisePropertyChanged("AudioPodcastITunesUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AudioRssUrl {
            get {
                return this.AudioRssUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.AudioRssUrlField, value) != true)) {
                    this.AudioRssUrlField = value;
                    this.RaisePropertyChanged("AudioRssUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] ChildFolders {
            get {
                return this.ChildFoldersField;
            }
            set {
                if ((object.ReferenceEquals(this.ChildFoldersField, value) != true)) {
                    this.ChildFoldersField = value;
                    this.RaisePropertyChanged("ChildFolders");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeliveriesHaveSpecifiedOrder {
            get {
                return this.DeliveriesHaveSpecifiedOrderField;
            }
            set {
                if ((this.DeliveriesHaveSpecifiedOrderField.Equals(value) != true)) {
                    this.DeliveriesHaveSpecifiedOrderField = value;
                    this.RaisePropertyChanged("DeliveriesHaveSpecifiedOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmbedUploaderUrl {
            get {
                return this.EmbedUploaderUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.EmbedUploaderUrlField, value) != true)) {
                    this.EmbedUploaderUrlField = value;
                    this.RaisePropertyChanged("EmbedUploaderUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmbedUrl {
            get {
                return this.EmbedUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.EmbedUrlField, value) != true)) {
                    this.EmbedUrlField = value;
                    this.RaisePropertyChanged("EmbedUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool EnablePodcast {
            get {
                return this.EnablePodcastField;
            }
            set {
                if ((this.EnablePodcastField.Equals(value) != true)) {
                    this.EnablePodcastField = value;
                    this.RaisePropertyChanged("EnablePodcast");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPublic {
            get {
                return this.IsPublicField;
            }
            set {
                if ((this.IsPublicField.Equals(value) != true)) {
                    this.IsPublicField = value;
                    this.RaisePropertyChanged("IsPublic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ListUrl {
            get {
                return this.ListUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ListUrlField, value) != true)) {
                    this.ListUrlField = value;
                    this.RaisePropertyChanged("ListUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ParentFolder {
            get {
                return this.ParentFolderField;
            }
            set {
                if ((this.ParentFolderField.Equals(value) != true)) {
                    this.ParentFolderField = value;
                    this.RaisePropertyChanged("ParentFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Presenters {
            get {
                return this.PresentersField;
            }
            set {
                if ((object.ReferenceEquals(this.PresentersField, value) != true)) {
                    this.PresentersField = value;
                    this.RaisePropertyChanged("Presenters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] Sessions {
            get {
                return this.SessionsField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionsField, value) != true)) {
                    this.SessionsField = value;
                    this.RaisePropertyChanged("Sessions");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SettingsUrl {
            get {
                return this.SettingsUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.SettingsUrlField, value) != true)) {
                    this.SettingsUrlField = value;
                    this.RaisePropertyChanged("SettingsUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VideoPodcastITunesUrl {
            get {
                return this.VideoPodcastITunesUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.VideoPodcastITunesUrlField, value) != true)) {
                    this.VideoPodcastITunesUrlField = value;
                    this.RaisePropertyChanged("VideoPodcastITunesUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VideoRssUrl {
            get {
                return this.VideoRssUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.VideoRssUrlField, value) != true)) {
                    this.VideoRssUrlField = value;
                    this.RaisePropertyChanged("VideoRssUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderWithExternalContext", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Data.Server.Services.PublicAPI.V4" +
        "6")]
    [System.SerializableAttribute()]
    public partial class FolderWithExternalContext : Utilities.SessionManagement46.FolderBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ExternalIdsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ExternalIds {
            get {
                return this.ExternalIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdsField, value) != true)) {
                    this.ExternalIdsField = value;
                    this.RaisePropertyChanged("ExternalIds");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Folder", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class Folder : Utilities.SessionManagement46.FolderBase {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Session", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V42.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class Session : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<double> DurationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EditorUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExternalIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IosVideoUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBroadcastField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDownloadableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MP3UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MP4UrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesURLField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OutputsPageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid[] RemoteRecorderIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SharePageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.SessionState StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThumbUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ViewerUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<double> Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EditorUrl {
            get {
                return this.EditorUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.EditorUrlField, value) != true)) {
                    this.EditorUrlField = value;
                    this.RaisePropertyChanged("EditorUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalId {
            get {
                return this.ExternalIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ExternalIdField, value) != true)) {
                    this.ExternalIdField = value;
                    this.RaisePropertyChanged("ExternalId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FolderId {
            get {
                return this.FolderIdField;
            }
            set {
                if ((this.FolderIdField.Equals(value) != true)) {
                    this.FolderIdField = value;
                    this.RaisePropertyChanged("FolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderName {
            get {
                return this.FolderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderNameField, value) != true)) {
                    this.FolderNameField = value;
                    this.RaisePropertyChanged("FolderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IosVideoUrl {
            get {
                return this.IosVideoUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.IosVideoUrlField, value) != true)) {
                    this.IosVideoUrlField = value;
                    this.RaisePropertyChanged("IosVideoUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBroadcast {
            get {
                return this.IsBroadcastField;
            }
            set {
                if ((this.IsBroadcastField.Equals(value) != true)) {
                    this.IsBroadcastField = value;
                    this.RaisePropertyChanged("IsBroadcast");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDownloadable {
            get {
                return this.IsDownloadableField;
            }
            set {
                if ((this.IsDownloadableField.Equals(value) != true)) {
                    this.IsDownloadableField = value;
                    this.RaisePropertyChanged("IsDownloadable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MP3Url {
            get {
                return this.MP3UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.MP3UrlField, value) != true)) {
                    this.MP3UrlField = value;
                    this.RaisePropertyChanged("MP3Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MP4Url {
            get {
                return this.MP4UrlField;
            }
            set {
                if ((object.ReferenceEquals(this.MP4UrlField, value) != true)) {
                    this.MP4UrlField = value;
                    this.RaisePropertyChanged("MP4Url");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NotesURL {
            get {
                return this.NotesURLField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesURLField, value) != true)) {
                    this.NotesURLField = value;
                    this.RaisePropertyChanged("NotesURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OutputsPageUrl {
            get {
                return this.OutputsPageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.OutputsPageUrlField, value) != true)) {
                    this.OutputsPageUrlField = value;
                    this.RaisePropertyChanged("OutputsPageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid[] RemoteRecorderIds {
            get {
                return this.RemoteRecorderIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.RemoteRecorderIdsField, value) != true)) {
                    this.RemoteRecorderIdsField = value;
                    this.RaisePropertyChanged("RemoteRecorderIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SharePageUrl {
            get {
                return this.SharePageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.SharePageUrlField, value) != true)) {
                    this.SharePageUrlField = value;
                    this.RaisePropertyChanged("SharePageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.SessionState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StatusMessage {
            get {
                return this.StatusMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusMessageField, value) != true)) {
                    this.StatusMessageField = value;
                    this.RaisePropertyChanged("StatusMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThumbUrl {
            get {
                return this.ThumbUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ThumbUrlField, value) != true)) {
                    this.ThumbUrlField = value;
                    this.RaisePropertyChanged("ThumbUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ViewerUrl {
            get {
                return this.ViewerUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ViewerUrlField, value) != true)) {
                    this.ViewerUrlField = value;
                    this.RaisePropertyChanged("ViewerUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionState", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    public enum SessionState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Created = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scheduled = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Recording = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Broadcasting = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Processing = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Complete = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListSessionsRequest", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class ListSessionsRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> FolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.Pagination PaginationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> RemoteRecorderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.SessionSortField SortByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SortIncreasingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.SessionState[] StatesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> FolderId {
            get {
                return this.FolderIdField;
            }
            set {
                if ((this.FolderIdField.Equals(value) != true)) {
                    this.FolderIdField = value;
                    this.RaisePropertyChanged("FolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.Pagination Pagination {
            get {
                return this.PaginationField;
            }
            set {
                if ((object.ReferenceEquals(this.PaginationField, value) != true)) {
                    this.PaginationField = value;
                    this.RaisePropertyChanged("Pagination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> RemoteRecorderId {
            get {
                return this.RemoteRecorderIdField;
            }
            set {
                if ((this.RemoteRecorderIdField.Equals(value) != true)) {
                    this.RemoteRecorderIdField = value;
                    this.RaisePropertyChanged("RemoteRecorderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.SessionSortField SortBy {
            get {
                return this.SortByField;
            }
            set {
                if ((this.SortByField.Equals(value) != true)) {
                    this.SortByField = value;
                    this.RaisePropertyChanged("SortBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SortIncreasing {
            get {
                return this.SortIncreasingField;
            }
            set {
                if ((this.SortIncreasingField.Equals(value) != true)) {
                    this.SortIncreasingField = value;
                    this.RaisePropertyChanged("SortIncreasing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.SessionState[] States {
            get {
                return this.StatesField;
            }
            set {
                if ((object.ReferenceEquals(this.StatesField, value) != true)) {
                    this.StatesField = value;
                    this.RaisePropertyChanged("States");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pagination", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class Pagination : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MaxNumberResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxNumberResults {
            get {
                return this.MaxNumberResultsField;
            }
            set {
                if ((this.MaxNumberResultsField.Equals(value) != true)) {
                    this.MaxNumberResultsField = value;
                    this.RaisePropertyChanged("MaxNumberResults");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageNumber {
            get {
                return this.PageNumberField;
            }
            set {
                if ((this.PageNumberField.Equals(value) != true)) {
                    this.PageNumberField = value;
                    this.RaisePropertyChanged("PageNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionSortField", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    public enum SessionSortField : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Date = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Duration = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        State = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Relevance = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Order = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListSessionsResponse", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class ListSessionsResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.Session[] ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNumberResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.Session[] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNumberResults {
            get {
                return this.TotalNumberResultsField;
            }
            set {
                if ((this.TotalNumberResultsField.Equals(value) != true)) {
                    this.TotalNumberResultsField = value;
                    this.RaisePropertyChanged("TotalNumberResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListFoldersRequest", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class ListFoldersRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.Pagination PaginationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.Guid> ParentFolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PublicOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.FolderSortField SortByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SortIncreasingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool WildcardSearchNameOnlyField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.Pagination Pagination {
            get {
                return this.PaginationField;
            }
            set {
                if ((object.ReferenceEquals(this.PaginationField, value) != true)) {
                    this.PaginationField = value;
                    this.RaisePropertyChanged("Pagination");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ParentFolderId {
            get {
                return this.ParentFolderIdField;
            }
            set {
                if ((this.ParentFolderIdField.Equals(value) != true)) {
                    this.ParentFolderIdField = value;
                    this.RaisePropertyChanged("ParentFolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PublicOnly {
            get {
                return this.PublicOnlyField;
            }
            set {
                if ((this.PublicOnlyField.Equals(value) != true)) {
                    this.PublicOnlyField = value;
                    this.RaisePropertyChanged("PublicOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.FolderSortField SortBy {
            get {
                return this.SortByField;
            }
            set {
                if ((this.SortByField.Equals(value) != true)) {
                    this.SortByField = value;
                    this.RaisePropertyChanged("SortBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool SortIncreasing {
            get {
                return this.SortIncreasingField;
            }
            set {
                if ((this.SortIncreasingField.Equals(value) != true)) {
                    this.SortIncreasingField = value;
                    this.RaisePropertyChanged("SortIncreasing");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool WildcardSearchNameOnly {
            get {
                return this.WildcardSearchNameOnlyField;
            }
            set {
                if ((this.WildcardSearchNameOnlyField.Equals(value) != true)) {
                    this.WildcardSearchNameOnlyField = value;
                    this.RaisePropertyChanged("WildcardSearchNameOnly");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderSortField", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    public enum FolderSortField : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Name = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Sessions = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Relavance = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListFoldersResponse", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class ListFoldersResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.Folder[] ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNumberResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.Folder[] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNumberResults {
            get {
                return this.TotalNumberResultsField;
            }
            set {
                if ((this.TotalNumberResultsField.Equals(value) != true)) {
                    this.TotalNumberResultsField = value;
                    this.RaisePropertyChanged("TotalNumberResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListFoldersResponseWithExternalContext", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class ListFoldersResponseWithExternalContext : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.FolderWithExternalContext[] ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNumberResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.FolderWithExternalContext[] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNumberResults {
            get {
                return this.TotalNumberResultsField;
            }
            set {
                if ((this.TotalNumberResultsField.Equals(value) != true)) {
                    this.TotalNumberResultsField = value;
                    this.RaisePropertyChanged("TotalNumberResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccessRole", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    public enum AccessRole : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Creator = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Viewer = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ViewerWithLink = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Publisher = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RecorderDownloadUrlResponse", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class RecorderDownloadUrlResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MacRecorderDownloadUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WindowsRecorderDownloadUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WindowsRemoteRecorderDownloadUrlField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MacRecorderDownloadUrl {
            get {
                return this.MacRecorderDownloadUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.MacRecorderDownloadUrlField, value) != true)) {
                    this.MacRecorderDownloadUrlField = value;
                    this.RaisePropertyChanged("MacRecorderDownloadUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WindowsRecorderDownloadUrl {
            get {
                return this.WindowsRecorderDownloadUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.WindowsRecorderDownloadUrlField, value) != true)) {
                    this.WindowsRecorderDownloadUrlField = value;
                    this.RaisePropertyChanged("WindowsRecorderDownloadUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WindowsRemoteRecorderDownloadUrl {
            get {
                return this.WindowsRemoteRecorderDownloadUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.WindowsRemoteRecorderDownloadUrlField, value) != true)) {
                    this.WindowsRemoteRecorderDownloadUrlField = value;
                    this.RaisePropertyChanged("WindowsRemoteRecorderDownloadUrl");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Note", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class Note : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ChannelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid CreatorIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SessionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Channel {
            get {
                return this.ChannelField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelField, value) != true)) {
                    this.ChannelField = value;
                    this.RaisePropertyChanged("Channel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid CreatorId {
            get {
                return this.CreatorIdField;
            }
            set {
                if ((this.CreatorIdField.Equals(value) != true)) {
                    this.CreatorIdField = value;
                    this.RaisePropertyChanged("CreatorId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SessionID {
            get {
                return this.SessionIDField;
            }
            set {
                if ((this.SessionIDField.Equals(value) != true)) {
                    this.SessionIDField = value;
                    this.RaisePropertyChanged("SessionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ListNotesResponse", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V40")]
    [System.SerializableAttribute()]
    public partial class ListNotesResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.Note[] ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNumberResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.Note[] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNumberResults {
            get {
                return this.TotalNumberResultsField;
            }
            set {
                if ((this.TotalNumberResultsField.Equals(value) != true)) {
                    this.TotalNumberResultsField = value;
                    this.RaisePropertyChanged("TotalNumberResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FoldersWithAvailabilitySettings", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class FoldersWithAvailabilitySettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.FolderAvailabilitySettings[] ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNumberResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.FolderAvailabilitySettings[] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNumberResults {
            get {
                return this.TotalNumberResultsField;
            }
            set {
                if ((this.TotalNumberResultsField.Equals(value) != true)) {
                    this.TotalNumberResultsField = value;
                    this.RaisePropertyChanged("TotalNumberResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderAvailabilitySettings", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class FolderAvailabilitySettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTimeOffset> EndSettingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.FolderEndSettingType EndSettingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid FolderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTimeOffset> StartSettingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.FolderStartSettingType StartSettingTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTimeOffset> EndSettingDate {
            get {
                return this.EndSettingDateField;
            }
            set {
                if ((this.EndSettingDateField.Equals(value) != true)) {
                    this.EndSettingDateField = value;
                    this.RaisePropertyChanged("EndSettingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.FolderEndSettingType EndSettingType {
            get {
                return this.EndSettingTypeField;
            }
            set {
                if ((this.EndSettingTypeField.Equals(value) != true)) {
                    this.EndSettingTypeField = value;
                    this.RaisePropertyChanged("EndSettingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FolderId {
            get {
                return this.FolderIdField;
            }
            set {
                if ((this.FolderIdField.Equals(value) != true)) {
                    this.FolderIdField = value;
                    this.RaisePropertyChanged("FolderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTimeOffset> StartSettingDate {
            get {
                return this.StartSettingDateField;
            }
            set {
                if ((this.StartSettingDateField.Equals(value) != true)) {
                    this.StartSettingDateField = value;
                    this.RaisePropertyChanged("StartSettingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.FolderStartSettingType StartSettingType {
            get {
                return this.StartSettingTypeField;
            }
            set {
                if ((this.StartSettingTypeField.Equals(value) != true)) {
                    this.StartSettingTypeField = value;
                    this.RaisePropertyChanged("StartSettingType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderEndSettingType", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    public enum FolderEndSettingType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Forever = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecificDate = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FolderStartSettingType", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    public enum FolderStartSettingType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Immediately = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WhenPublisherApproved = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NeverUnlessSessionSet = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecificDate = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionsWithAvailabilitySettings", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class SessionsWithAvailabilitySettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.SessionAvailabilitySettings[] ResultsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalNumberResultsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.SessionAvailabilitySettings[] Results {
            get {
                return this.ResultsField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultsField, value) != true)) {
                    this.ResultsField = value;
                    this.RaisePropertyChanged("Results");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalNumberResults {
            get {
                return this.TotalNumberResultsField;
            }
            set {
                if ((this.TotalNumberResultsField.Equals(value) != true)) {
                    this.TotalNumberResultsField = value;
                    this.RaisePropertyChanged("TotalNumberResults");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionAvailabilitySettings", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    [System.SerializableAttribute()]
    public partial class SessionAvailabilitySettings : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTimeOffset> EndSettingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.SessionEndSettingType EndSettingTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTimeOffset> StartSettingDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Utilities.SessionManagement46.SessionStartSettingType StartSettingTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTimeOffset> EndSettingDate {
            get {
                return this.EndSettingDateField;
            }
            set {
                if ((this.EndSettingDateField.Equals(value) != true)) {
                    this.EndSettingDateField = value;
                    this.RaisePropertyChanged("EndSettingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.SessionEndSettingType EndSettingType {
            get {
                return this.EndSettingTypeField;
            }
            set {
                if ((this.EndSettingTypeField.Equals(value) != true)) {
                    this.EndSettingTypeField = value;
                    this.RaisePropertyChanged("EndSettingType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((this.SessionIdField.Equals(value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTimeOffset> StartSettingDate {
            get {
                return this.StartSettingDateField;
            }
            set {
                if ((this.StartSettingDateField.Equals(value) != true)) {
                    this.StartSettingDateField = value;
                    this.RaisePropertyChanged("StartSettingDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Utilities.SessionManagement46.SessionStartSettingType StartSettingType {
            get {
                return this.StartSettingTypeField;
            }
            set {
                if ((this.StartSettingTypeField.Equals(value) != true)) {
                    this.StartSettingTypeField = value;
                    this.RaisePropertyChanged("StartSettingType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionEndSettingType", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    public enum SessionEndSettingType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Forever = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WithItsFolder = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecificDate = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionStartSettingType", Namespace="http://schemas.datacontract.org/2004/07/Panopto.Server.Services.PublicAPI.V46.Soa" +
        "p")]
    public enum SessionStartSettingType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Immediately = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WithItsFolder = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SpecificDate = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SessionManagement46.ISessionManagement")]
    public interface ISessionManagement {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/AddFolder", ReplyAction="http://tempuri.org/ISessionManagement/AddFolderResponse")]
        Utilities.SessionManagement46.Folder AddFolder(Utilities.SessionManagement46.AuthenticationInfo auth, string name, System.Nullable<System.Guid> parentFolder, bool isPublic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/AddFolder", ReplyAction="http://tempuri.org/ISessionManagement/AddFolderResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder> AddFolderAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, System.Nullable<System.Guid> parentFolder, bool isPublic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/AddSession", ReplyAction="http://tempuri.org/ISessionManagement/AddSessionResponse")]
        Utilities.SessionManagement46.Session AddSession(Utilities.SessionManagement46.AuthenticationInfo auth, string name, System.Guid folderId, bool isBroadcast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/AddSession", ReplyAction="http://tempuri.org/ISessionManagement/AddSessionResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Session> AddSessionAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, System.Guid folderId, bool isBroadcast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersById", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersByIdResponse")]
        Utilities.SessionManagement46.Folder[] GetFoldersById(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersById", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersByIdResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> GetFoldersByIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextById", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextByIdResponse")]
        Utilities.SessionManagement46.FolderWithExternalContext[] GetFoldersWithExternalContextById(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextById", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextByIdResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.FolderWithExternalContext[]> GetFoldersWithExternalContextByIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersByExternalId", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersByExternalIdResponse")]
        Utilities.SessionManagement46.Folder[] GetFoldersByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersByExternalId", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersByExternalIdResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> GetFoldersByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextByExternalId", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextByExternalIdRe" +
            "sponse")]
        Utilities.SessionManagement46.FolderWithExternalContext[] GetFoldersWithExternalContextByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextByExternalId", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextByExternalIdRe" +
            "sponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.FolderWithExternalContext[]> GetFoldersWithExternalContextByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetAllFoldersByExternalId", ReplyAction="http://tempuri.org/ISessionManagement/GetAllFoldersByExternalIdResponse")]
        Utilities.SessionManagement46.Folder[] GetAllFoldersByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds, string[] providerNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetAllFoldersByExternalId", ReplyAction="http://tempuri.org/ISessionManagement/GetAllFoldersByExternalIdResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> GetAllFoldersByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds, string[] providerNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetAllFoldersWithExternalContextByExternalI" +
            "d", ReplyAction="http://tempuri.org/ISessionManagement/GetAllFoldersWithExternalContextByExternalI" +
            "dResponse")]
        Utilities.SessionManagement46.FolderWithExternalContext[] GetAllFoldersWithExternalContextByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds, string[] providerNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetAllFoldersWithExternalContextByExternalI" +
            "d", ReplyAction="http://tempuri.org/ISessionManagement/GetAllFoldersWithExternalContextByExternalI" +
            "dResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.FolderWithExternalContext[]> GetAllFoldersWithExternalContextByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds, string[] providerNames);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetSessionsById", ReplyAction="http://tempuri.org/ISessionManagement/GetSessionsByIdResponse")]
        Utilities.SessionManagement46.Session[] GetSessionsById(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetSessionsById", ReplyAction="http://tempuri.org/ISessionManagement/GetSessionsByIdResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Session[]> GetSessionsByIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetSessionsByExternalId", ReplyAction="http://tempuri.org/ISessionManagement/GetSessionsByExternalIdResponse")]
        Utilities.SessionManagement46.Session[] GetSessionsByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] sessionExternalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetSessionsByExternalId", ReplyAction="http://tempuri.org/ISessionManagement/GetSessionsByExternalIdResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Session[]> GetSessionsByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] sessionExternalIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetSessionsList", ReplyAction="http://tempuri.org/ISessionManagement/GetSessionsListResponse")]
        Utilities.SessionManagement46.ListSessionsResponse GetSessionsList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListSessionsRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetSessionsList", ReplyAction="http://tempuri.org/ISessionManagement/GetSessionsListResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.ListSessionsResponse> GetSessionsListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListSessionsRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersList", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersListResponse")]
        Utilities.SessionManagement46.ListFoldersResponse GetFoldersList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersList", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersListResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.ListFoldersResponse> GetFoldersListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextList", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextListResponse")]
        Utilities.SessionManagement46.ListFoldersResponseWithExternalContext GetFoldersWithExternalContextList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextList", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersWithExternalContextListResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.ListFoldersResponseWithExternalContext> GetFoldersWithExternalContextListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetCreatorFoldersList", ReplyAction="http://tempuri.org/ISessionManagement/GetCreatorFoldersListResponse")]
        Utilities.SessionManagement46.ListFoldersResponse GetCreatorFoldersList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetCreatorFoldersList", ReplyAction="http://tempuri.org/ISessionManagement/GetCreatorFoldersListResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.ListFoldersResponse> GetCreatorFoldersListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetCreatorFoldersWithExternalContextList", ReplyAction="http://tempuri.org/ISessionManagement/GetCreatorFoldersWithExternalContextListRes" +
            "ponse")]
        Utilities.SessionManagement46.ListFoldersResponseWithExternalContext GetCreatorFoldersWithExternalContextList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetCreatorFoldersWithExternalContextList", ReplyAction="http://tempuri.org/ISessionManagement/GetCreatorFoldersWithExternalContextListRes" +
            "ponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.ListFoldersResponseWithExternalContext> GetCreatorFoldersWithExternalContextListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionName", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionNameResponse")]
        void UpdateSessionName(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionName", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionNameResponse")]
        System.Threading.Tasks.Task UpdateSessionNameAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionDescription", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionDescriptionResponse")]
        void UpdateSessionDescription(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionDescription", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionDescriptionResponse")]
        System.Threading.Tasks.Task UpdateSessionDescriptionAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionIsBroadcast", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionIsBroadcastResponse")]
        void UpdateSessionIsBroadcast(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, bool isBroadcast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionIsBroadcast", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionIsBroadcastResponse")]
        System.Threading.Tasks.Task UpdateSessionIsBroadcastAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, bool isBroadcast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionSetPanoptoBroadcast", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionSetPanoptoBroadcastResponse")]
        void UpdateSessionSetPanoptoBroadcast(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionSetPanoptoBroadcast", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionSetPanoptoBroadcastResponse")]
        System.Threading.Tasks.Task UpdateSessionSetPanoptoBroadcastAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionSetRTMPBroadcast", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionSetRTMPBroadcastResponse")]
        string[] UpdateSessionSetRTMPBroadcast(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionSetRTMPBroadcast", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionSetRTMPBroadcastResponse")]
        System.Threading.Tasks.Task<string[]> UpdateSessionSetRTMPBroadcastAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionCreateRTMPStreams", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionCreateRTMPStreamsResponse")]
        string[] UpdateSessionCreateRTMPStreams(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, int countToAdd, bool arePrimaries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionCreateRTMPStreams", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionCreateRTMPStreamsResponse")]
        System.Threading.Tasks.Task<string[]> UpdateSessionCreateRTMPStreamsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, int countToAdd, bool arePrimaries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionUpdateRTMPStreamTypes", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionUpdateRTMPStreamTypesResponse")]
        void UpdateSessionUpdateRTMPStreamTypes(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string[] streamKeys, bool setAsPrimaries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionUpdateRTMPStreamTypes", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionUpdateRTMPStreamTypesResponse")]
        System.Threading.Tasks.Task UpdateSessionUpdateRTMPStreamTypesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string[] streamKeys, bool setAsPrimaries);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionOwner", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionOwnerResponse")]
        void UpdateSessionOwner(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, string newOwnerUserKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionOwner", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionOwnerResponse")]
        System.Threading.Tasks.Task UpdateSessionOwnerAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, string newOwnerUserKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/MoveSessions", ReplyAction="http://tempuri.org/ISessionManagement/MoveSessionsResponse")]
        void MoveSessions(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, System.Guid folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/MoveSessions", ReplyAction="http://tempuri.org/ISessionManagement/MoveSessionsResponse")]
        System.Threading.Tasks.Task MoveSessionsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, System.Guid folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionExternalId", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionExternalIdResponse")]
        void UpdateSessionExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string externalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionExternalId", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionExternalIdResponse")]
        System.Threading.Tasks.Task UpdateSessionExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string externalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderName", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderNameResponse")]
        void UpdateFolderName(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderName", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderNameResponse")]
        System.Threading.Tasks.Task UpdateFolderNameAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderDescription", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderDescriptionResponse")]
        void UpdateFolderDescription(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderDescription", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderDescriptionResponse")]
        System.Threading.Tasks.Task UpdateFolderDescriptionAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string description);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderEnablePodcast", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderEnablePodcastResponse")]
        void UpdateFolderEnablePodcast(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool enablePodcast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderEnablePodcast", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderEnablePodcastResponse")]
        System.Threading.Tasks.Task UpdateFolderEnablePodcastAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool enablePodcast);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderAllowPublicNotes", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderAllowPublicNotesResponse")]
        void UpdateFolderAllowPublicNotes(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool allowPublicNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderAllowPublicNotes", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderAllowPublicNotesResponse")]
        System.Threading.Tasks.Task UpdateFolderAllowPublicNotesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool allowPublicNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderAllowSessionDownload", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderAllowSessionDownloadResponse")]
        void UpdateFolderAllowSessionDownload(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool allowSessionDownload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderAllowSessionDownload", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderAllowSessionDownloadResponse")]
        System.Threading.Tasks.Task UpdateFolderAllowSessionDownloadAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool allowSessionDownload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderParent", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderParentResponse")]
        void UpdateFolderParent(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, System.Nullable<System.Guid> parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderParent", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderParentResponse")]
        System.Threading.Tasks.Task UpdateFolderParentAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, System.Nullable<System.Guid> parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderExternalId", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderExternalIdResponse")]
        void UpdateFolderExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string externalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderExternalId", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderExternalIdResponse")]
        System.Threading.Tasks.Task UpdateFolderExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string externalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderExternalIdWithProvider", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderExternalIdWithProviderResponse")]
        void UpdateFolderExternalIdWithProvider(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string externalId, string SiteMembershipProviderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFolderExternalIdWithProvider", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFolderExternalIdWithProviderResponse")]
        System.Threading.Tasks.Task UpdateFolderExternalIdWithProviderAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string externalId, string SiteMembershipProviderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/DeleteSessions", ReplyAction="http://tempuri.org/ISessionManagement/DeleteSessionsResponse")]
        void DeleteSessions(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/DeleteSessions", ReplyAction="http://tempuri.org/ISessionManagement/DeleteSessionsResponse")]
        System.Threading.Tasks.Task DeleteSessionsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/DeleteFolders", ReplyAction="http://tempuri.org/ISessionManagement/DeleteFoldersResponse")]
        void DeleteFolders(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/DeleteFolders", ReplyAction="http://tempuri.org/ISessionManagement/DeleteFoldersResponse")]
        System.Threading.Tasks.Task DeleteFoldersAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/ProvisionExternalCourse", ReplyAction="http://tempuri.org/ISessionManagement/ProvisionExternalCourseResponse")]
        Utilities.SessionManagement46.Folder ProvisionExternalCourse(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/ProvisionExternalCourse", ReplyAction="http://tempuri.org/ISessionManagement/ProvisionExternalCourseResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder> ProvisionExternalCourseAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/ProvisionExternalCourseWithRoles", ReplyAction="http://tempuri.org/ISessionManagement/ProvisionExternalCourseWithRolesResponse")]
        Utilities.SessionManagement46.Folder ProvisionExternalCourseWithRoles(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, Utilities.SessionManagement46.AccessRole[] roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/ProvisionExternalCourseWithRoles", ReplyAction="http://tempuri.org/ISessionManagement/ProvisionExternalCourseWithRolesResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder> ProvisionExternalCourseWithRolesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, Utilities.SessionManagement46.AccessRole[] roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetExternalCourseAccess", ReplyAction="http://tempuri.org/ISessionManagement/SetExternalCourseAccessResponse")]
        Utilities.SessionManagement46.Folder[] SetExternalCourseAccess(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetExternalCourseAccess", ReplyAction="http://tempuri.org/ISessionManagement/SetExternalCourseAccessResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> SetExternalCourseAccessAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetExternalCourseAccessForRoles", ReplyAction="http://tempuri.org/ISessionManagement/SetExternalCourseAccessForRolesResponse")]
        Utilities.SessionManagement46.Folder[] SetExternalCourseAccessForRoles(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds, Utilities.SessionManagement46.AccessRole[] roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetExternalCourseAccessForRoles", ReplyAction="http://tempuri.org/ISessionManagement/SetExternalCourseAccessForRolesResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> SetExternalCourseAccessForRolesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds, Utilities.SessionManagement46.AccessRole[] roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetCopiedExternalCourseAccess", ReplyAction="http://tempuri.org/ISessionManagement/SetCopiedExternalCourseAccessResponse")]
        Utilities.SessionManagement46.Folder[] SetCopiedExternalCourseAccess(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetCopiedExternalCourseAccess", ReplyAction="http://tempuri.org/ISessionManagement/SetCopiedExternalCourseAccessResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> SetCopiedExternalCourseAccessAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetCopiedExternalCourseAccessForRoles", ReplyAction="http://tempuri.org/ISessionManagement/SetCopiedExternalCourseAccessForRolesRespon" +
            "se")]
        Utilities.SessionManagement46.Folder[] SetCopiedExternalCourseAccessForRoles(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds, Utilities.SessionManagement46.AccessRole[] roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetCopiedExternalCourseAccessForRoles", ReplyAction="http://tempuri.org/ISessionManagement/SetCopiedExternalCourseAccessForRolesRespon" +
            "se")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> SetCopiedExternalCourseAccessForRolesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds, Utilities.SessionManagement46.AccessRole[] roles);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetRecorderDownloadUrls", ReplyAction="http://tempuri.org/ISessionManagement/GetRecorderDownloadUrlsResponse")]
        Utilities.SessionManagement46.RecorderDownloadUrlResponse GetRecorderDownloadUrls();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetRecorderDownloadUrls", ReplyAction="http://tempuri.org/ISessionManagement/GetRecorderDownloadUrlsResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.RecorderDownloadUrlResponse> GetRecorderDownloadUrlsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/CreateNoteByRelativeTime", ReplyAction="http://tempuri.org/ISessionManagement/CreateNoteByRelativeTimeResponse")]
        System.Guid CreateNoteByRelativeTime(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, string channel, double timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/CreateNoteByRelativeTime", ReplyAction="http://tempuri.org/ISessionManagement/CreateNoteByRelativeTimeResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateNoteByRelativeTimeAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, string channel, double timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/CreateNoteByAbsoluteTime", ReplyAction="http://tempuri.org/ISessionManagement/CreateNoteByAbsoluteTimeResponse")]
        System.Guid CreateNoteByAbsoluteTime(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, string channel, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/CreateNoteByAbsoluteTime", ReplyAction="http://tempuri.org/ISessionManagement/CreateNoteByAbsoluteTimeResponse")]
        System.Threading.Tasks.Task<System.Guid> CreateNoteByAbsoluteTimeAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, string channel, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/EditNote", ReplyAction="http://tempuri.org/ISessionManagement/EditNoteResponse")]
        void EditNote(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId, string newText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/EditNote", ReplyAction="http://tempuri.org/ISessionManagement/EditNoteResponse")]
        System.Threading.Tasks.Task EditNoteAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId, string newText);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/DeleteNote", ReplyAction="http://tempuri.org/ISessionManagement/DeleteNoteResponse")]
        void DeleteNote(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/DeleteNote", ReplyAction="http://tempuri.org/ISessionManagement/DeleteNoteResponse")]
        System.Threading.Tasks.Task DeleteNoteAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetNote", ReplyAction="http://tempuri.org/ISessionManagement/GetNoteResponse")]
        Utilities.SessionManagement46.Note GetNote(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetNote", ReplyAction="http://tempuri.org/ISessionManagement/GetNoteResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Note> GetNoteAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/ListNotes", ReplyAction="http://tempuri.org/ISessionManagement/ListNotesResponse")]
        Utilities.SessionManagement46.ListNotesResponse ListNotes(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, Utilities.SessionManagement46.Pagination pagination, System.Nullable<System.Guid> creatorId, string channel, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/ListNotes", ReplyAction="http://tempuri.org/ISessionManagement/ListNotesResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.ListNotesResponse> ListNotesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, Utilities.SessionManagement46.Pagination pagination, System.Nullable<System.Guid> creatorId, string channel, string searchQuery);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/AreUsersNotesPublic", ReplyAction="http://tempuri.org/ISessionManagement/AreUsersNotesPublicResponse")]
        bool AreUsersNotesPublic(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid userId, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/AreUsersNotesPublic", ReplyAction="http://tempuri.org/ISessionManagement/AreUsersNotesPublicResponse")]
        System.Threading.Tasks.Task<bool> AreUsersNotesPublicAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid userId, System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetNotesPublic", ReplyAction="http://tempuri.org/ISessionManagement/SetNotesPublicResponse")]
        void SetNotesPublic(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, bool areNotesPublic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/SetNotesPublic", ReplyAction="http://tempuri.org/ISessionManagement/SetNotesPublicResponse")]
        System.Threading.Tasks.Task SetNotesPublicAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, bool areNotesPublic);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/IsDropbox", ReplyAction="http://tempuri.org/ISessionManagement/IsDropboxResponse")]
        bool IsDropbox(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/IsDropbox", ReplyAction="http://tempuri.org/ISessionManagement/IsDropboxResponse")]
        System.Threading.Tasks.Task<bool> IsDropboxAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/CreateCaptionByRelativeTime", ReplyAction="http://tempuri.org/ISessionManagement/CreateCaptionByRelativeTimeResponse")]
        void CreateCaptionByRelativeTime(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, double timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/CreateCaptionByRelativeTime", ReplyAction="http://tempuri.org/ISessionManagement/CreateCaptionByRelativeTimeResponse")]
        System.Threading.Tasks.Task CreateCaptionByRelativeTimeAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, double timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/CreateCaptionByAbsoluteTime", ReplyAction="http://tempuri.org/ISessionManagement/CreateCaptionByAbsoluteTimeResponse")]
        void CreateCaptionByAbsoluteTime(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/CreateCaptionByAbsoluteTime", ReplyAction="http://tempuri.org/ISessionManagement/CreateCaptionByAbsoluteTimeResponse")]
        System.Threading.Tasks.Task CreateCaptionByAbsoluteTimeAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, System.DateTime timestamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UploadTranscript", ReplyAction="http://tempuri.org/ISessionManagement/UploadTranscriptResponse")]
        void UploadTranscript(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UploadTranscript", ReplyAction="http://tempuri.org/ISessionManagement/UploadTranscriptResponse")]
        System.Threading.Tasks.Task UploadTranscriptAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersAvailabilitySettings", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersAvailabilitySettingsResponse")]
        Utilities.SessionManagement46.FoldersWithAvailabilitySettings GetFoldersAvailabilitySettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetFoldersAvailabilitySettings", ReplyAction="http://tempuri.org/ISessionManagement/GetFoldersAvailabilitySettingsResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.FoldersWithAvailabilitySettings> GetFoldersAvailabilitySettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetSessionsAvailabilitySettings", ReplyAction="http://tempuri.org/ISessionManagement/GetSessionsAvailabilitySettingsResponse")]
        Utilities.SessionManagement46.SessionsWithAvailabilitySettings GetSessionsAvailabilitySettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetSessionsAvailabilitySettings", ReplyAction="http://tempuri.org/ISessionManagement/GetSessionsAvailabilitySettingsResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.SessionsWithAvailabilitySettings> GetSessionsAvailabilitySettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFoldersAvailabilityStartSettings", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFoldersAvailabilityStartSettingsRespo" +
            "nse")]
        bool UpdateFoldersAvailabilityStartSettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds, Utilities.SessionManagement46.FolderStartSettingType settingType, System.Nullable<System.DateTime> startDate, bool overrideSessionsSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFoldersAvailabilityStartSettings", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFoldersAvailabilityStartSettingsRespo" +
            "nse")]
        System.Threading.Tasks.Task<bool> UpdateFoldersAvailabilityStartSettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds, Utilities.SessionManagement46.FolderStartSettingType settingType, System.Nullable<System.DateTime> startDate, bool overrideSessionsSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFoldersAvailabilityEndSettings", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFoldersAvailabilityEndSettingsRespons" +
            "e")]
        bool UpdateFoldersAvailabilityEndSettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds, Utilities.SessionManagement46.FolderEndSettingType settingType, System.Nullable<System.DateTime> endDate, bool overrideSessionsSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateFoldersAvailabilityEndSettings", ReplyAction="http://tempuri.org/ISessionManagement/UpdateFoldersAvailabilityEndSettingsRespons" +
            "e")]
        System.Threading.Tasks.Task<bool> UpdateFoldersAvailabilityEndSettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds, Utilities.SessionManagement46.FolderEndSettingType settingType, System.Nullable<System.DateTime> endDate, bool overrideSessionsSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionsAvailabilityStartSettings", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionsAvailabilityStartSettingsResp" +
            "onse")]
        bool UpdateSessionsAvailabilityStartSettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, Utilities.SessionManagement46.SessionStartSettingType settingType, System.Nullable<System.DateTime> startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionsAvailabilityStartSettings", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionsAvailabilityStartSettingsResp" +
            "onse")]
        System.Threading.Tasks.Task<bool> UpdateSessionsAvailabilityStartSettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, Utilities.SessionManagement46.SessionStartSettingType settingType, System.Nullable<System.DateTime> startDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionsAvailabilityEndSettings", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionsAvailabilityEndSettingsRespon" +
            "se")]
        bool UpdateSessionsAvailabilityEndSettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, Utilities.SessionManagement46.SessionEndSettingType settingType, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/UpdateSessionsAvailabilityEndSettings", ReplyAction="http://tempuri.org/ISessionManagement/UpdateSessionsAvailabilityEndSettingsRespon" +
            "se")]
        System.Threading.Tasks.Task<bool> UpdateSessionsAvailabilityEndSettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, Utilities.SessionManagement46.SessionEndSettingType settingType, System.Nullable<System.DateTime> endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetPersonalFolderForUser", ReplyAction="http://tempuri.org/ISessionManagement/GetPersonalFolderForUserResponse")]
        Utilities.SessionManagement46.Folder GetPersonalFolderForUser(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid userId, bool allowCreation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISessionManagement/GetPersonalFolderForUser", ReplyAction="http://tempuri.org/ISessionManagement/GetPersonalFolderForUserResponse")]
        System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder> GetPersonalFolderForUserAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid userId, bool allowCreation);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISessionManagementChannel : Utilities.SessionManagement46.ISessionManagement, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SessionManagementClient : System.ServiceModel.ClientBase<Utilities.SessionManagement46.ISessionManagement>, Utilities.SessionManagement46.ISessionManagement {
        
        public SessionManagementClient() {
        }
        
        public SessionManagementClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SessionManagementClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SessionManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Utilities.SessionManagement46.Folder AddFolder(Utilities.SessionManagement46.AuthenticationInfo auth, string name, System.Nullable<System.Guid> parentFolder, bool isPublic) {
            return base.Channel.AddFolder(auth, name, parentFolder, isPublic);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder> AddFolderAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, System.Nullable<System.Guid> parentFolder, bool isPublic) {
            return base.Channel.AddFolderAsync(auth, name, parentFolder, isPublic);
        }
        
        public Utilities.SessionManagement46.Session AddSession(Utilities.SessionManagement46.AuthenticationInfo auth, string name, System.Guid folderId, bool isBroadcast) {
            return base.Channel.AddSession(auth, name, folderId, isBroadcast);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Session> AddSessionAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, System.Guid folderId, bool isBroadcast) {
            return base.Channel.AddSessionAsync(auth, name, folderId, isBroadcast);
        }
        
        public Utilities.SessionManagement46.Folder[] GetFoldersById(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds) {
            return base.Channel.GetFoldersById(auth, folderIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> GetFoldersByIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds) {
            return base.Channel.GetFoldersByIdAsync(auth, folderIds);
        }
        
        public Utilities.SessionManagement46.FolderWithExternalContext[] GetFoldersWithExternalContextById(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds) {
            return base.Channel.GetFoldersWithExternalContextById(auth, folderIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.FolderWithExternalContext[]> GetFoldersWithExternalContextByIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds) {
            return base.Channel.GetFoldersWithExternalContextByIdAsync(auth, folderIds);
        }
        
        public Utilities.SessionManagement46.Folder[] GetFoldersByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds) {
            return base.Channel.GetFoldersByExternalId(auth, folderExternalIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> GetFoldersByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds) {
            return base.Channel.GetFoldersByExternalIdAsync(auth, folderExternalIds);
        }
        
        public Utilities.SessionManagement46.FolderWithExternalContext[] GetFoldersWithExternalContextByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds) {
            return base.Channel.GetFoldersWithExternalContextByExternalId(auth, folderExternalIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.FolderWithExternalContext[]> GetFoldersWithExternalContextByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds) {
            return base.Channel.GetFoldersWithExternalContextByExternalIdAsync(auth, folderExternalIds);
        }
        
        public Utilities.SessionManagement46.Folder[] GetAllFoldersByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds, string[] providerNames) {
            return base.Channel.GetAllFoldersByExternalId(auth, folderExternalIds, providerNames);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> GetAllFoldersByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds, string[] providerNames) {
            return base.Channel.GetAllFoldersByExternalIdAsync(auth, folderExternalIds, providerNames);
        }
        
        public Utilities.SessionManagement46.FolderWithExternalContext[] GetAllFoldersWithExternalContextByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds, string[] providerNames) {
            return base.Channel.GetAllFoldersWithExternalContextByExternalId(auth, folderExternalIds, providerNames);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.FolderWithExternalContext[]> GetAllFoldersWithExternalContextByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] folderExternalIds, string[] providerNames) {
            return base.Channel.GetAllFoldersWithExternalContextByExternalIdAsync(auth, folderExternalIds, providerNames);
        }
        
        public Utilities.SessionManagement46.Session[] GetSessionsById(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds) {
            return base.Channel.GetSessionsById(auth, sessionIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Session[]> GetSessionsByIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds) {
            return base.Channel.GetSessionsByIdAsync(auth, sessionIds);
        }
        
        public Utilities.SessionManagement46.Session[] GetSessionsByExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, string[] sessionExternalIds) {
            return base.Channel.GetSessionsByExternalId(auth, sessionExternalIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Session[]> GetSessionsByExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string[] sessionExternalIds) {
            return base.Channel.GetSessionsByExternalIdAsync(auth, sessionExternalIds);
        }
        
        public Utilities.SessionManagement46.ListSessionsResponse GetSessionsList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListSessionsRequest request, string searchQuery) {
            return base.Channel.GetSessionsList(auth, request, searchQuery);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.ListSessionsResponse> GetSessionsListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListSessionsRequest request, string searchQuery) {
            return base.Channel.GetSessionsListAsync(auth, request, searchQuery);
        }
        
        public Utilities.SessionManagement46.ListFoldersResponse GetFoldersList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery) {
            return base.Channel.GetFoldersList(auth, request, searchQuery);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.ListFoldersResponse> GetFoldersListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery) {
            return base.Channel.GetFoldersListAsync(auth, request, searchQuery);
        }
        
        public Utilities.SessionManagement46.ListFoldersResponseWithExternalContext GetFoldersWithExternalContextList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery) {
            return base.Channel.GetFoldersWithExternalContextList(auth, request, searchQuery);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.ListFoldersResponseWithExternalContext> GetFoldersWithExternalContextListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery) {
            return base.Channel.GetFoldersWithExternalContextListAsync(auth, request, searchQuery);
        }
        
        public Utilities.SessionManagement46.ListFoldersResponse GetCreatorFoldersList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery) {
            return base.Channel.GetCreatorFoldersList(auth, request, searchQuery);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.ListFoldersResponse> GetCreatorFoldersListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery) {
            return base.Channel.GetCreatorFoldersListAsync(auth, request, searchQuery);
        }
        
        public Utilities.SessionManagement46.ListFoldersResponseWithExternalContext GetCreatorFoldersWithExternalContextList(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery) {
            return base.Channel.GetCreatorFoldersWithExternalContextList(auth, request, searchQuery);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.ListFoldersResponseWithExternalContext> GetCreatorFoldersWithExternalContextListAsync(Utilities.SessionManagement46.AuthenticationInfo auth, Utilities.SessionManagement46.ListFoldersRequest request, string searchQuery) {
            return base.Channel.GetCreatorFoldersWithExternalContextListAsync(auth, request, searchQuery);
        }
        
        public void UpdateSessionName(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string name) {
            base.Channel.UpdateSessionName(auth, sessionId, name);
        }
        
        public System.Threading.Tasks.Task UpdateSessionNameAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string name) {
            return base.Channel.UpdateSessionNameAsync(auth, sessionId, name);
        }
        
        public void UpdateSessionDescription(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string description) {
            base.Channel.UpdateSessionDescription(auth, sessionId, description);
        }
        
        public System.Threading.Tasks.Task UpdateSessionDescriptionAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string description) {
            return base.Channel.UpdateSessionDescriptionAsync(auth, sessionId, description);
        }
        
        public void UpdateSessionIsBroadcast(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, bool isBroadcast) {
            base.Channel.UpdateSessionIsBroadcast(auth, sessionId, isBroadcast);
        }
        
        public System.Threading.Tasks.Task UpdateSessionIsBroadcastAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, bool isBroadcast) {
            return base.Channel.UpdateSessionIsBroadcastAsync(auth, sessionId, isBroadcast);
        }
        
        public void UpdateSessionSetPanoptoBroadcast(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId) {
            base.Channel.UpdateSessionSetPanoptoBroadcast(auth, sessionId);
        }
        
        public System.Threading.Tasks.Task UpdateSessionSetPanoptoBroadcastAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId) {
            return base.Channel.UpdateSessionSetPanoptoBroadcastAsync(auth, sessionId);
        }
        
        public string[] UpdateSessionSetRTMPBroadcast(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId) {
            return base.Channel.UpdateSessionSetRTMPBroadcast(auth, sessionId);
        }
        
        public System.Threading.Tasks.Task<string[]> UpdateSessionSetRTMPBroadcastAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId) {
            return base.Channel.UpdateSessionSetRTMPBroadcastAsync(auth, sessionId);
        }
        
        public string[] UpdateSessionCreateRTMPStreams(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, int countToAdd, bool arePrimaries) {
            return base.Channel.UpdateSessionCreateRTMPStreams(auth, sessionId, countToAdd, arePrimaries);
        }
        
        public System.Threading.Tasks.Task<string[]> UpdateSessionCreateRTMPStreamsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, int countToAdd, bool arePrimaries) {
            return base.Channel.UpdateSessionCreateRTMPStreamsAsync(auth, sessionId, countToAdd, arePrimaries);
        }
        
        public void UpdateSessionUpdateRTMPStreamTypes(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string[] streamKeys, bool setAsPrimaries) {
            base.Channel.UpdateSessionUpdateRTMPStreamTypes(auth, sessionId, streamKeys, setAsPrimaries);
        }
        
        public System.Threading.Tasks.Task UpdateSessionUpdateRTMPStreamTypesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string[] streamKeys, bool setAsPrimaries) {
            return base.Channel.UpdateSessionUpdateRTMPStreamTypesAsync(auth, sessionId, streamKeys, setAsPrimaries);
        }
        
        public void UpdateSessionOwner(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, string newOwnerUserKey) {
            base.Channel.UpdateSessionOwner(auth, sessionIds, newOwnerUserKey);
        }
        
        public System.Threading.Tasks.Task UpdateSessionOwnerAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, string newOwnerUserKey) {
            return base.Channel.UpdateSessionOwnerAsync(auth, sessionIds, newOwnerUserKey);
        }
        
        public void MoveSessions(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, System.Guid folderId) {
            base.Channel.MoveSessions(auth, sessionIds, folderId);
        }
        
        public System.Threading.Tasks.Task MoveSessionsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, System.Guid folderId) {
            return base.Channel.MoveSessionsAsync(auth, sessionIds, folderId);
        }
        
        public void UpdateSessionExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string externalId) {
            base.Channel.UpdateSessionExternalId(auth, sessionId, externalId);
        }
        
        public System.Threading.Tasks.Task UpdateSessionExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string externalId) {
            return base.Channel.UpdateSessionExternalIdAsync(auth, sessionId, externalId);
        }
        
        public void UpdateFolderName(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string name) {
            base.Channel.UpdateFolderName(auth, folderId, name);
        }
        
        public System.Threading.Tasks.Task UpdateFolderNameAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string name) {
            return base.Channel.UpdateFolderNameAsync(auth, folderId, name);
        }
        
        public void UpdateFolderDescription(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string description) {
            base.Channel.UpdateFolderDescription(auth, folderId, description);
        }
        
        public System.Threading.Tasks.Task UpdateFolderDescriptionAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string description) {
            return base.Channel.UpdateFolderDescriptionAsync(auth, folderId, description);
        }
        
        public void UpdateFolderEnablePodcast(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool enablePodcast) {
            base.Channel.UpdateFolderEnablePodcast(auth, folderId, enablePodcast);
        }
        
        public System.Threading.Tasks.Task UpdateFolderEnablePodcastAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool enablePodcast) {
            return base.Channel.UpdateFolderEnablePodcastAsync(auth, folderId, enablePodcast);
        }
        
        public void UpdateFolderAllowPublicNotes(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool allowPublicNotes) {
            base.Channel.UpdateFolderAllowPublicNotes(auth, folderId, allowPublicNotes);
        }
        
        public System.Threading.Tasks.Task UpdateFolderAllowPublicNotesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool allowPublicNotes) {
            return base.Channel.UpdateFolderAllowPublicNotesAsync(auth, folderId, allowPublicNotes);
        }
        
        public void UpdateFolderAllowSessionDownload(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool allowSessionDownload) {
            base.Channel.UpdateFolderAllowSessionDownload(auth, folderId, allowSessionDownload);
        }
        
        public System.Threading.Tasks.Task UpdateFolderAllowSessionDownloadAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, bool allowSessionDownload) {
            return base.Channel.UpdateFolderAllowSessionDownloadAsync(auth, folderId, allowSessionDownload);
        }
        
        public void UpdateFolderParent(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, System.Nullable<System.Guid> parentId) {
            base.Channel.UpdateFolderParent(auth, folderId, parentId);
        }
        
        public System.Threading.Tasks.Task UpdateFolderParentAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, System.Nullable<System.Guid> parentId) {
            return base.Channel.UpdateFolderParentAsync(auth, folderId, parentId);
        }
        
        public void UpdateFolderExternalId(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string externalId) {
            base.Channel.UpdateFolderExternalId(auth, folderId, externalId);
        }
        
        public System.Threading.Tasks.Task UpdateFolderExternalIdAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string externalId) {
            return base.Channel.UpdateFolderExternalIdAsync(auth, folderId, externalId);
        }
        
        public void UpdateFolderExternalIdWithProvider(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string externalId, string SiteMembershipProviderName) {
            base.Channel.UpdateFolderExternalIdWithProvider(auth, folderId, externalId, SiteMembershipProviderName);
        }
        
        public System.Threading.Tasks.Task UpdateFolderExternalIdWithProviderAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId, string externalId, string SiteMembershipProviderName) {
            return base.Channel.UpdateFolderExternalIdWithProviderAsync(auth, folderId, externalId, SiteMembershipProviderName);
        }
        
        public void DeleteSessions(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds) {
            base.Channel.DeleteSessions(auth, sessionIds);
        }
        
        public System.Threading.Tasks.Task DeleteSessionsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds) {
            return base.Channel.DeleteSessionsAsync(auth, sessionIds);
        }
        
        public void DeleteFolders(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds) {
            base.Channel.DeleteFolders(auth, folderIds);
        }
        
        public System.Threading.Tasks.Task DeleteFoldersAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds) {
            return base.Channel.DeleteFoldersAsync(auth, folderIds);
        }
        
        public Utilities.SessionManagement46.Folder ProvisionExternalCourse(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId) {
            return base.Channel.ProvisionExternalCourse(auth, name, externalId);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder> ProvisionExternalCourseAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId) {
            return base.Channel.ProvisionExternalCourseAsync(auth, name, externalId);
        }
        
        public Utilities.SessionManagement46.Folder ProvisionExternalCourseWithRoles(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, Utilities.SessionManagement46.AccessRole[] roles) {
            return base.Channel.ProvisionExternalCourseWithRoles(auth, name, externalId, roles);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder> ProvisionExternalCourseWithRolesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, Utilities.SessionManagement46.AccessRole[] roles) {
            return base.Channel.ProvisionExternalCourseWithRolesAsync(auth, name, externalId, roles);
        }
        
        public Utilities.SessionManagement46.Folder[] SetExternalCourseAccess(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds) {
            return base.Channel.SetExternalCourseAccess(auth, name, externalId, folderIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> SetExternalCourseAccessAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds) {
            return base.Channel.SetExternalCourseAccessAsync(auth, name, externalId, folderIds);
        }
        
        public Utilities.SessionManagement46.Folder[] SetExternalCourseAccessForRoles(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds, Utilities.SessionManagement46.AccessRole[] roles) {
            return base.Channel.SetExternalCourseAccessForRoles(auth, name, externalId, folderIds, roles);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> SetExternalCourseAccessForRolesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds, Utilities.SessionManagement46.AccessRole[] roles) {
            return base.Channel.SetExternalCourseAccessForRolesAsync(auth, name, externalId, folderIds, roles);
        }
        
        public Utilities.SessionManagement46.Folder[] SetCopiedExternalCourseAccess(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds) {
            return base.Channel.SetCopiedExternalCourseAccess(auth, name, externalId, folderIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> SetCopiedExternalCourseAccessAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds) {
            return base.Channel.SetCopiedExternalCourseAccessAsync(auth, name, externalId, folderIds);
        }
        
        public Utilities.SessionManagement46.Folder[] SetCopiedExternalCourseAccessForRoles(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds, Utilities.SessionManagement46.AccessRole[] roles) {
            return base.Channel.SetCopiedExternalCourseAccessForRoles(auth, name, externalId, folderIds, roles);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder[]> SetCopiedExternalCourseAccessForRolesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, string name, string externalId, System.Guid[] folderIds, Utilities.SessionManagement46.AccessRole[] roles) {
            return base.Channel.SetCopiedExternalCourseAccessForRolesAsync(auth, name, externalId, folderIds, roles);
        }
        
        public Utilities.SessionManagement46.RecorderDownloadUrlResponse GetRecorderDownloadUrls() {
            return base.Channel.GetRecorderDownloadUrls();
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.RecorderDownloadUrlResponse> GetRecorderDownloadUrlsAsync() {
            return base.Channel.GetRecorderDownloadUrlsAsync();
        }
        
        public System.Guid CreateNoteByRelativeTime(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, string channel, double timestamp) {
            return base.Channel.CreateNoteByRelativeTime(auth, sessionId, text, channel, timestamp);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateNoteByRelativeTimeAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, string channel, double timestamp) {
            return base.Channel.CreateNoteByRelativeTimeAsync(auth, sessionId, text, channel, timestamp);
        }
        
        public System.Guid CreateNoteByAbsoluteTime(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, string channel, System.DateTime timestamp) {
            return base.Channel.CreateNoteByAbsoluteTime(auth, sessionId, text, channel, timestamp);
        }
        
        public System.Threading.Tasks.Task<System.Guid> CreateNoteByAbsoluteTimeAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, string channel, System.DateTime timestamp) {
            return base.Channel.CreateNoteByAbsoluteTimeAsync(auth, sessionId, text, channel, timestamp);
        }
        
        public void EditNote(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId, string newText) {
            base.Channel.EditNote(auth, noteId, sessionId, newText);
        }
        
        public System.Threading.Tasks.Task EditNoteAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId, string newText) {
            return base.Channel.EditNoteAsync(auth, noteId, sessionId, newText);
        }
        
        public void DeleteNote(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId) {
            base.Channel.DeleteNote(auth, noteId, sessionId);
        }
        
        public System.Threading.Tasks.Task DeleteNoteAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId) {
            return base.Channel.DeleteNoteAsync(auth, noteId, sessionId);
        }
        
        public Utilities.SessionManagement46.Note GetNote(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId) {
            return base.Channel.GetNote(auth, noteId, sessionId);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Note> GetNoteAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid noteId, System.Guid sessionId) {
            return base.Channel.GetNoteAsync(auth, noteId, sessionId);
        }
        
        public Utilities.SessionManagement46.ListNotesResponse ListNotes(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, Utilities.SessionManagement46.Pagination pagination, System.Nullable<System.Guid> creatorId, string channel, string searchQuery) {
            return base.Channel.ListNotes(auth, sessionId, pagination, creatorId, channel, searchQuery);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.ListNotesResponse> ListNotesAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, Utilities.SessionManagement46.Pagination pagination, System.Nullable<System.Guid> creatorId, string channel, string searchQuery) {
            return base.Channel.ListNotesAsync(auth, sessionId, pagination, creatorId, channel, searchQuery);
        }
        
        public bool AreUsersNotesPublic(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid userId, System.Guid sessionId) {
            return base.Channel.AreUsersNotesPublic(auth, userId, sessionId);
        }
        
        public System.Threading.Tasks.Task<bool> AreUsersNotesPublicAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid userId, System.Guid sessionId) {
            return base.Channel.AreUsersNotesPublicAsync(auth, userId, sessionId);
        }
        
        public void SetNotesPublic(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, bool areNotesPublic) {
            base.Channel.SetNotesPublic(auth, sessionId, areNotesPublic);
        }
        
        public System.Threading.Tasks.Task SetNotesPublicAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, bool areNotesPublic) {
            return base.Channel.SetNotesPublicAsync(auth, sessionId, areNotesPublic);
        }
        
        public bool IsDropbox(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId) {
            return base.Channel.IsDropbox(auth, folderId);
        }
        
        public System.Threading.Tasks.Task<bool> IsDropboxAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid folderId) {
            return base.Channel.IsDropboxAsync(auth, folderId);
        }
        
        public void CreateCaptionByRelativeTime(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, double timestamp) {
            base.Channel.CreateCaptionByRelativeTime(auth, sessionId, text, timestamp);
        }
        
        public System.Threading.Tasks.Task CreateCaptionByRelativeTimeAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, double timestamp) {
            return base.Channel.CreateCaptionByRelativeTimeAsync(auth, sessionId, text, timestamp);
        }
        
        public void CreateCaptionByAbsoluteTime(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, System.DateTime timestamp) {
            base.Channel.CreateCaptionByAbsoluteTime(auth, sessionId, text, timestamp);
        }
        
        public System.Threading.Tasks.Task CreateCaptionByAbsoluteTimeAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string text, System.DateTime timestamp) {
            return base.Channel.CreateCaptionByAbsoluteTimeAsync(auth, sessionId, text, timestamp);
        }
        
        public void UploadTranscript(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string file) {
            base.Channel.UploadTranscript(auth, sessionId, file);
        }
        
        public System.Threading.Tasks.Task UploadTranscriptAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid sessionId, string file) {
            return base.Channel.UploadTranscriptAsync(auth, sessionId, file);
        }
        
        public Utilities.SessionManagement46.FoldersWithAvailabilitySettings GetFoldersAvailabilitySettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds) {
            return base.Channel.GetFoldersAvailabilitySettings(auth, folderIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.FoldersWithAvailabilitySettings> GetFoldersAvailabilitySettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds) {
            return base.Channel.GetFoldersAvailabilitySettingsAsync(auth, folderIds);
        }
        
        public Utilities.SessionManagement46.SessionsWithAvailabilitySettings GetSessionsAvailabilitySettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds) {
            return base.Channel.GetSessionsAvailabilitySettings(auth, sessionIds);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.SessionsWithAvailabilitySettings> GetSessionsAvailabilitySettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds) {
            return base.Channel.GetSessionsAvailabilitySettingsAsync(auth, sessionIds);
        }
        
        public bool UpdateFoldersAvailabilityStartSettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds, Utilities.SessionManagement46.FolderStartSettingType settingType, System.Nullable<System.DateTime> startDate, bool overrideSessionsSettings) {
            return base.Channel.UpdateFoldersAvailabilityStartSettings(auth, folderIds, settingType, startDate, overrideSessionsSettings);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFoldersAvailabilityStartSettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds, Utilities.SessionManagement46.FolderStartSettingType settingType, System.Nullable<System.DateTime> startDate, bool overrideSessionsSettings) {
            return base.Channel.UpdateFoldersAvailabilityStartSettingsAsync(auth, folderIds, settingType, startDate, overrideSessionsSettings);
        }
        
        public bool UpdateFoldersAvailabilityEndSettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds, Utilities.SessionManagement46.FolderEndSettingType settingType, System.Nullable<System.DateTime> endDate, bool overrideSessionsSettings) {
            return base.Channel.UpdateFoldersAvailabilityEndSettings(auth, folderIds, settingType, endDate, overrideSessionsSettings);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFoldersAvailabilityEndSettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] folderIds, Utilities.SessionManagement46.FolderEndSettingType settingType, System.Nullable<System.DateTime> endDate, bool overrideSessionsSettings) {
            return base.Channel.UpdateFoldersAvailabilityEndSettingsAsync(auth, folderIds, settingType, endDate, overrideSessionsSettings);
        }
        
        public bool UpdateSessionsAvailabilityStartSettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, Utilities.SessionManagement46.SessionStartSettingType settingType, System.Nullable<System.DateTime> startDate) {
            return base.Channel.UpdateSessionsAvailabilityStartSettings(auth, sessionIds, settingType, startDate);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSessionsAvailabilityStartSettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, Utilities.SessionManagement46.SessionStartSettingType settingType, System.Nullable<System.DateTime> startDate) {
            return base.Channel.UpdateSessionsAvailabilityStartSettingsAsync(auth, sessionIds, settingType, startDate);
        }
        
        public bool UpdateSessionsAvailabilityEndSettings(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, Utilities.SessionManagement46.SessionEndSettingType settingType, System.Nullable<System.DateTime> endDate) {
            return base.Channel.UpdateSessionsAvailabilityEndSettings(auth, sessionIds, settingType, endDate);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateSessionsAvailabilityEndSettingsAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid[] sessionIds, Utilities.SessionManagement46.SessionEndSettingType settingType, System.Nullable<System.DateTime> endDate) {
            return base.Channel.UpdateSessionsAvailabilityEndSettingsAsync(auth, sessionIds, settingType, endDate);
        }
        
        public Utilities.SessionManagement46.Folder GetPersonalFolderForUser(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid userId, bool allowCreation) {
            return base.Channel.GetPersonalFolderForUser(auth, userId, allowCreation);
        }
        
        public System.Threading.Tasks.Task<Utilities.SessionManagement46.Folder> GetPersonalFolderForUserAsync(Utilities.SessionManagement46.AuthenticationInfo auth, System.Guid userId, bool allowCreation) {
            return base.Channel.GetPersonalFolderForUserAsync(auth, userId, allowCreation);
        }
    }
}
